terraform {
  required_providers {
    yandex = {
      source  = "yandex-cloud/yandex"
      version = ">= 0.87.0"
    }
  }
}

data "template_file" "user_data" {
  template = file("scripts/add_user.yaml")
}

variable "network_zone" {
  description = "Yandex.Cloud network availability zones"
  type        = string
  default     = "ru-central1-a"
}

data "yandex_vpc_network" "default" {
  name = "default"
}

data "yandex_vpc_subnet" "default" {
  for_each = toset(["ru-central1-a", "ru-central1-b"])

  name = "${data.yandex_vpc_network.default.name}-${each.key}"
}

variable "instance_zone" {
  default     = "ru-central1-a"
  type        = string
  description = "Instance availability zone"
  validation {
    condition     = contains(toset(["ru-central1-a", "ru-central1-b", "ru-central1-c"]), var.instance_zone)
    error_message = "Select availability zone from the list: ru-central1-a, ru-central1-b, ru-central1-c."
  }
  sensitive = true
  nullable  = false
}

variable "yandex_token" {
  default     = ""
  type        = string
  description = "Yandex token generated by yc"
  sensitive   = true
  nullable    = false
}

output "yandex_vpc_subnets" {
  description = "Yandex.Cloud Subnets map"
  value       = data.yandex_vpc_subnet.default
}

# to avoid error need to pass variable yandex_token to command line
# example: terraform apply -var="yandex_token=$YC_TOKEN"
provider "yandex" {
  cloud_id  = "b1g3jddf4nv5e9okle7p"
  folder_id = "b1g4v2q4j0dfegi3pmsc"
  zone      = "ru-central1-a"
  token     = var.yandex_token
}

resource "yandex_compute_instance" "vm-1" {
  name = "chapter5-lesson2-std-011-049-test"
  zone = var.instance_zone

  # Resource configuration:
  resources {
    cores  = 2
    memory = 2
  }

  # Boot disk:
  # Image of OS for new VM
  boot_disk {
    initialize_params {
      image_id = "fd80qm01ah03dkqb14lc"
    }
  }

  # Network interface:
  # subnet_id to which will be connected VM
  network_interface {
    subnet_id = "e9bedb7iti13lungfmgg"
    nat       = false
  }

  # Resource metadata:
  # Could provide script,which will be launched at start of VM
  # And list of ssh - keys to access VM
  metadata = {
    ssh-keys = "ansible:${file("~/.ssh/id_rsa.pub")}"
    user_data = data.template_file.user_data.rendered
  }
}
output "ip_address" {
  value = yandex_compute_instance.vm-1.network_interface.0.ip_address
} 
